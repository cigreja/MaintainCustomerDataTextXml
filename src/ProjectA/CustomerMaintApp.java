
package ProjectA;

import static ProjectA.CustomerConstants.EMAIL_SIZE;
import static ProjectA.CustomerConstants.FIRST_NAME_SIZE;
import static ProjectA.CustomerConstants.LAST_NAME_SIZE;
import static java.lang.System.exit;
import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.Scanner;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * CustomerMaintApp 
 * Class that controls execution. This class is the application gui that 
 * the user can interact with the program. The program stores customer data.
 * 
 * @author Carlos Igreja
 * @version 4/2/2014
 */
public class CustomerMaintApp extends javax.swing.JFrame {

    private static CustomerDAO customerDAO = null;
    private ArrayList<Customer> customers;
    private DefaultTableModel table;
    private Validator sv = new Validator();
    private StringBuilder sb = new StringBuilder();
    
    /**
     * Creates new form 
     */
    public CustomerMaintApp() {
        initComponents();
        
        customerDAO = DAOFactory.getCustomerDAO();
        customers = customerDAO.getCustomers();
        
        // Initialize the table
        table = (DefaultTableModel)customerTable.getModel();
        boolean hasCustomer = false;
        for(Customer c : customers){
            table.addRow(new Object[]{c.getFirstName(),c.getLastName(),c.getEmail()});
            hasCustomer = true;
        }
        if(hasCustomer){
            customerTable.setRowSelectionInterval(0, 0);
        }
        
        // Initialize the Radio Buttons
        SortRadioButtons.add(FirstNameRadio);
        SortRadioButtons.add(LastNameRadio);
        SortRadioButtons.add(EmailRadio);
        FirstNameRadio.doClick();
        
        String s = "Welcome to the Customer Maintenance application\n\n";
        sb.append(s);
        displayTextArea.setText(sb.toString());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SortRadioButtons = new javax.swing.ButtonGroup();
        CustomerListPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        customerTable = new javax.swing.JTable();
        MainMenuPanel = new javax.swing.JPanel();
        listButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        helpButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        testListButton = new javax.swing.JButton();
        searchButton = new javax.swing.JButton();
        DataEntryPanel = new javax.swing.JPanel();
        emailTextField = new javax.swing.JTextField();
        firstNameTextField = new javax.swing.JTextField();
        lastNameTextField = new javax.swing.JTextField();
        EmailLabel = new javax.swing.JLabel();
        LastNameLabel = new javax.swing.JLabel();
        FirstNameLabel = new javax.swing.JLabel();
        CustomerLogPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        displayTextArea = new javax.swing.JTextArea();
        SortListPanel = new javax.swing.JPanel();
        FirstNameRadio = new javax.swing.JRadioButton();
        LastNameRadio = new javax.swing.JRadioButton();
        EmailRadio = new javax.swing.JRadioButton();
        SortButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Customer Maintenance ");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        CustomerListPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Customer List"));

        customerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "First Name", "Last Name", "Email"
            }
        ));
        jScrollPane3.setViewportView(customerTable);
        if (customerTable.getColumnModel().getColumnCount() > 0) {
            customerTable.getColumnModel().getColumn(0).setMaxWidth(125);
            customerTable.getColumnModel().getColumn(1).setMaxWidth(125);
            customerTable.getColumnModel().getColumn(2).setMaxWidth(200);
        }

        javax.swing.GroupLayout CustomerListPanelLayout = new javax.swing.GroupLayout(CustomerListPanel);
        CustomerListPanel.setLayout(CustomerListPanelLayout);
        CustomerListPanelLayout.setHorizontalGroup(
            CustomerListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CustomerListPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        CustomerListPanelLayout.setVerticalGroup(
            CustomerListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        MainMenuPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Main Menu"));

        listButton.setText("List ");
        listButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listButtonActionPerformed(evt);
            }
        });

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        helpButton.setText("Help");
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });

        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        testListButton.setText("Test List");
        testListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testListButtonActionPerformed(evt);
            }
        });

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout MainMenuPanelLayout = new javax.swing.GroupLayout(MainMenuPanel);
        MainMenuPanel.setLayout(MainMenuPanelLayout);
        MainMenuPanelLayout.setHorizontalGroup(
            MainMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainMenuPanelLayout.createSequentialGroup()
                .addGroup(MainMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(listButton, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                    .addComponent(testListButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(MainMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(helpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(MainMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(MainMenuPanelLayout.createSequentialGroup()
                .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        MainMenuPanelLayout.setVerticalGroup(
            MainMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MainMenuPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(MainMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(MainMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(helpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(listButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(MainMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(testListButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        DataEntryPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Data Entry"));

        EmailLabel.setText("Email :");

        LastNameLabel.setText("Last Name :");

        FirstNameLabel.setText("First Name :");

        javax.swing.GroupLayout DataEntryPanelLayout = new javax.swing.GroupLayout(DataEntryPanel);
        DataEntryPanel.setLayout(DataEntryPanelLayout);
        DataEntryPanelLayout.setHorizontalGroup(
            DataEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DataEntryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(DataEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(EmailLabel)
                    .addComponent(LastNameLabel)
                    .addComponent(FirstNameLabel))
                .addGroup(DataEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(emailTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                    .addComponent(lastNameTextField)
                    .addComponent(firstNameTextField))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        DataEntryPanelLayout.setVerticalGroup(
            DataEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DataEntryPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(DataEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FirstNameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(DataEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lastNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LastNameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(DataEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(emailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(DataEntryPanelLayout.createSequentialGroup()
                        .addComponent(EmailLabel)
                        .addGap(9, 9, 9)))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        CustomerLogPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Customer Log"));

        displayTextArea.setColumns(20);
        displayTextArea.setRows(5);
        jScrollPane2.setViewportView(displayTextArea);

        javax.swing.GroupLayout CustomerLogPanelLayout = new javax.swing.GroupLayout(CustomerLogPanel);
        CustomerLogPanel.setLayout(CustomerLogPanelLayout);
        CustomerLogPanelLayout.setHorizontalGroup(
            CustomerLogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CustomerLogPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane2)
                .addGap(0, 0, 0))
        );
        CustomerLogPanelLayout.setVerticalGroup(
            CustomerLogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CustomerLogPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        SortListPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Sort List"));

        FirstNameRadio.setText("First Name");

        LastNameRadio.setText("Last Name");

        EmailRadio.setText("Email");

        SortButton.setText("Sort");
        SortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SortButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout SortListPanelLayout = new javax.swing.GroupLayout(SortListPanel);
        SortListPanel.setLayout(SortListPanelLayout);
        SortListPanelLayout.setHorizontalGroup(
            SortListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SortListPanelLayout.createSequentialGroup()
                .addGroup(SortListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(SortButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FirstNameRadio)
                    .addGroup(SortListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(EmailRadio)
                        .addComponent(LastNameRadio)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        SortListPanelLayout.setVerticalGroup(
            SortListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SortListPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(FirstNameRadio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(LastNameRadio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(EmailRadio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(SortButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(CustomerLogPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(DataEntryPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(MainMenuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(SortListPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, 0)
                        .addComponent(CustomerListPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(DataEntryPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(MainMenuPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(SortListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(CustomerListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CustomerLogPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        
        if(customerTable.getSelectedRow() != -1 &&
                customerTable.getRowCount() != 0){
            String firstName = firstNameTextField.getText();
            String lastName = lastNameTextField.getText();
            String email = emailTextField.getText();
            int index = customerTable.getSelectedRow();
            Customer original = customers.get(index);

            boolean savedFile = false;
            Customer customer = new Customer();

            if(firstName.length() == 0 &&
                    lastName.length() == 0 &&
                    email.length() == 0){
                JOptionPane.showMessageDialog(firstNameTextField,
                        "Need at least one data field entered.\n"
                                + "(First name, Last name, or Email)\n",
                        "Data entry error",0);
            }else{
                if(firstName.length() != 0 &&
                        lastName.length() != 0 &&
                        email.length() != 0){
                    if(sv.isName(firstNameTextField, "First Name") &&
                            sv.isName(lastNameTextField, "Last Name") &&
                            sv.isEmail(emailTextField, "Email")){
                        customer.setFirstName(firstName);
                        customer.setLastName(lastName);
                        customer.setEmail(email);
                        savedFile = customerDAO.updateCustomer(customer, original);
                    }
                }
                else if(firstName.length() != 0 &&
                        email.length() != 0){
                    if(sv.isName(firstNameTextField, "First Name") &&
                            sv.isEmail(emailTextField, "Email")){
                        lastName = customers.get(index).getLastName();
                        customer.setFirstName(firstName);
                        customer.setLastName(lastName);
                        customer.setEmail(email);
                        savedFile = customerDAO.updateCustomer(customer, original);
                    }
                }
                else if(lastName.length() != 0 &&
                        email.length() != 0){
                    if(sv.isName(lastNameTextField, "Last Name") &&
                            sv.isEmail(emailTextField, "Email")){
                        firstName = customers.get(index).getFirstName();
                        customer.setFirstName(firstName);
                        customer.setLastName(lastName);
                        customer.setEmail(email);
                        savedFile = customerDAO.updateCustomer(customer, original);
                    }
                }
                else if(firstName.length() != 0 &&
                    lastName.length() != 0){
                    if(sv.isName(firstNameTextField, "First Name") &&
                            sv.isName(lastNameTextField, "Last Name")){
                        email = customers.get(index).getEmail();
                        customer.setFirstName(firstName);
                        customer.setLastName(lastName);
                        customer.setEmail(email);
                        savedFile = customerDAO.updateCustomer(customer, original);
                    }
                }
                else if(firstName.length() != 0){
                    if(sv.isName(firstNameTextField, "First Name")){
                        lastName = customers.get(index).getLastName();
                        email = customers.get(index).getEmail();
                        customer.setFirstName(firstName);
                        customer.setLastName(lastName);
                        customer.setEmail(email);
                        savedFile = customerDAO.updateCustomer(customer, original);
                    }
                }
                else if(lastName.length() != 0){
                    if(sv.isName(lastNameTextField, "Last Name")){
                        firstName = customers.get(index).getFirstName();
                        email = customers.get(index).getEmail();
                        customer.setFirstName(firstName);
                        customer.setLastName(lastName);
                        customer.setEmail(email);
                        savedFile = customerDAO.updateCustomer(customer, original);
                    }
                }
                else if(email.length() != 0){
                    if(sv.isEmail(emailTextField, "Email")){
                        firstName = customers.get(index).getFirstName();
                        lastName = customers.get(index).getLastName();
                        customer.setFirstName(firstName);
                        customer.setLastName(lastName);
                        customer.setEmail(email);
                        savedFile = customerDAO.updateCustomer(customer, original);
                    }
                }
            }
            if(savedFile == true){

                sb.append(
                        original.getFirstName()+"  "+original.getLastName()+"  ("+original.getEmail()+") "+
                        "  has been updated to  " +
                        customer.getFirstName()+"  "+customer.getLastName()+"  ("+customer.getEmail()+")\n");
                displayTextArea.setText(sb.toString());
                
                //update the table
                table.removeRow(index);
                table.insertRow(index, new Object[]{customer.getFirstName(),customer.getLastName(),customer.getEmail()});
                customerTable.setRowSelectionInterval(index, index);
            } 
        }else{
            JOptionPane.showMessageDialog(updateButton,"No customer is selected.","Data entry error",0);
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        
        firstNameTextField.setText("");
        lastNameTextField.setText("");
        emailTextField.setText("");
        
    }//GEN-LAST:event_clearButtonActionPerformed

    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
        
        String s = "Clear   - Clears the entry fields"  + "\n\n" +
                   "Update  - Change a customers name  or email"  + "\n\n" +
                   "Add     - Add a customer to the list"  + "\n\n" +
                   "Delete  - Delete a customer from the list"  + "\n\n" +
                   "Help    - Show this help menu"  + "\n\n" +
                   "List    - This will refresh the list from a search"  + "\n\n" +
                   "Sort    - Sorts the customer list in ascending order"  + "\n\n" +
                   "Test List    - This loads 20 customers from a default test customer list xml file"  + "\n\n" +
                   "Search    - Search for a customer by name"  + "\n\n" +
                   "Exit    - Exit this application\n"  + "\n" ;
        
        JOptionPane.showMessageDialog(helpButton,s,"HELP MENU",1);
    }//GEN-LAST:event_helpButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        String firstName = null;
        String lastName = null;
        String email = null;
        
        Customer customer = new Customer();
        if (sv.isPresent(firstNameTextField, "First name ") &&
                sv.isName(firstNameTextField, "First name ")){
            firstName = firstNameTextField.getText();
            customer.setFirstName(firstName);
        }
        if (sv.isPresent(lastNameTextField, "Last name ") &&
                sv.isName(lastNameTextField, "Last name ")){
            lastName = lastNameTextField.getText();
            customer.setLastName(lastName);
        }
        if (sv.isPresent(emailTextField, "Email ") &&
                sv.isEmail(emailTextField, "Email ")){
            email = emailTextField.getText();
            customer.setEmail(email);
            
            // check for duplicate email
            for (Customer c : customers){
                if (email.equals(c.getEmail())){
                    String m = "This email already exists";
                    String t = "Data Entry Error";
                    JOptionPane.showMessageDialog(emailTextField,m,t,0);
                    email = null;
                }
            }
        }
        
        boolean savedFile = false;
        if(firstName != null &&
                lastName != null &&
                email != null){
            
            savedFile = customerDAO.addCustomer(customer);
            if(savedFile == true){

                sb.append(customer.getFirstName()+"  "+customer.getLastName()+"  ("+customer.getEmail()+") "
                        + " has been added.\n");
                displayTextArea.setText(sb.toString());
                
                //update the table
                table.addRow(new Object[]{customer.getFirstName(),customer.getLastName(),customer.getEmail()});
                int index = customerTable.getRowCount() - 1;
                customerTable.setRowSelectionInterval(index, index);
            }
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        
        String email = null;
        Customer c = null;
        
        int index = 0;
        if(customerTable.getSelectedRow() != -1 &&
                customerTable.getRowCount() != 0){
            index = customerTable.getSelectedRow();
            email = customers.get(index).getEmail();
            c = customerDAO.getCustomer(email);
        }

        if (c != null){
            
            boolean savedFile = false;
            savedFile = customerDAO.deleteCustomer(c);
            if(savedFile == true){
                
                sb.append(c.getFirstName()+"  "+c.getLastName()+"  ("+c.getEmail()+") "
                        + " has been deleted.\n");
                displayTextArea.setText(sb.toString());
                
                //update the table
                table.removeRow(index);
                if(customerTable.getRowCount() != 0){
                    customerTable.setRowSelectionInterval(0, 0);
                }
            }
        }else{
            JOptionPane.showMessageDialog(deleteButton,"No customer is selected.","Data entry error",0);
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void listButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listButtonActionPerformed

        if(customers.size() != 0){
            updateTable();
            customerTable.setRowSelectionInterval(0, 0);
        }else{
            JOptionPane.showMessageDialog(listButton,"The list is empty","Data entry error",0);
        }
    }//GEN-LAST:event_listButtonActionPerformed

    private void SortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SortButtonActionPerformed

        if(customerTable.getRowCount() != 0){
            if(FirstNameRadio.isSelected()){
                //sorts by last name then first name for duplicate first names
                Collections.sort(customers, new Customer.SortByLastName());
                Collections.sort(customers, new Customer.SortByFirstName());

                //update customer file and table
                customerDAO.setCustomers(customers);
                updateTable();
            }
            if(LastNameRadio.isSelected()){
                //sorts by first name then last name for duplicate last names
                Collections.sort(customers, new Customer.SortByFirstName());
                Collections.sort(customers, new Customer.SortByLastName());

                //update customer file and table
                customerDAO.setCustomers(customers);
                updateTable();
            }
            if(EmailRadio.isSelected()){
                //there is no duplicate emails so just sort by email
                Collections.sort(customers, new Customer.SortByEmail());

                //update customer file and table
                customerDAO.setCustomers(customers);
                updateTable();
            }

            customerTable.setRowSelectionInterval(0, 0);
        }else{
            JOptionPane.showMessageDialog(SortButton,"Customer list is empty.","Data entry error",0);
        }
    }//GEN-LAST:event_SortButtonActionPerformed

    private void testListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testListButtonActionPerformed

        ArrayList<Customer> xml = CustomerXML.readCustomers();
        boolean addElement = false;
        for (Customer x : xml){
            addElement = true;
            for(Customer c : customers){
                if (x.getEmail().equals(c.getEmail())){
                    addElement = false;
                }
            }
            if(addElement == true){
                customerDAO.addCustomer(x);
                
                //update the table
                table.addRow(new Object[]{x.getFirstName(),x.getLastName(),x.getEmail()});
            }
        }
        if(customerTable.getRowCount() > 0){
            customerTable.setRowSelectionInterval(0, 0);
        }
    }//GEN-LAST:event_testListButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
  
        String textFirstName = firstNameTextField.getText();
        String textLastName = lastNameTextField.getText();
        String cFirstName = null;
        String cLastName = null;
         
        ArrayList<Customer> searchList = new ArrayList<>();
        
        if(textFirstName.length() > 0 &&
                textLastName.length() > 0){
            for(Customer c : customers){
                cFirstName = c.getFirstName();
                cLastName = c.getLastName();
                if(cFirstName.indexOf(textFirstName) != -1 &&
                        cLastName.indexOf(textLastName) != -1){
                    searchList.add(c);
                }
            }
        }
        else if(textFirstName.length() > 0){
            for(Customer c : customers){
                cFirstName = c.getFirstName();
                if(cFirstName.indexOf(textFirstName) != -1){
                    searchList.add(c);
                }
            }
        }
        else if(textLastName.length() > 0){
            for(Customer c : customers){
                cLastName = c.getLastName();
                if(cLastName.indexOf(textLastName) != -1){
                    searchList.add(c);
                }
            }
        }

        for(int i = table.getRowCount() -1; i >= 0; i--){
            table.removeRow(i);
        }
        for(Customer c : searchList){
            table.addRow(new Object[]{c.getFirstName(),c.getLastName(),c.getEmail()});
        }
        
    }//GEN-LAST:event_searchButtonActionPerformed

    public void updateTable(){
        
        for(int i = table.getRowCount() -1; i >= 0; i--){
            table.removeRow(i);
        }
        for(Customer c : customers){
            table.addRow(new Object[]{c.getFirstName(),c.getLastName(),c.getEmail()});
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CustomerMaintApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CustomerMaintApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CustomerMaintApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustomerMaintApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CustomerMaintApp frame = new CustomerMaintApp();
                frame.setVisible(true);
                frame.setLocationRelativeTo(null);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel CustomerListPanel;
    private javax.swing.JPanel CustomerLogPanel;
    private javax.swing.JPanel DataEntryPanel;
    private javax.swing.JLabel EmailLabel;
    private javax.swing.JRadioButton EmailRadio;
    private javax.swing.JLabel FirstNameLabel;
    private javax.swing.JRadioButton FirstNameRadio;
    private javax.swing.JLabel LastNameLabel;
    private javax.swing.JRadioButton LastNameRadio;
    private javax.swing.JPanel MainMenuPanel;
    private javax.swing.JButton SortButton;
    private javax.swing.JPanel SortListPanel;
    private javax.swing.ButtonGroup SortRadioButtons;
    private javax.swing.JButton addButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JTable customerTable;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextArea displayTextArea;
    private javax.swing.JTextField emailTextField;
    private javax.swing.JButton exitButton;
    private javax.swing.JTextField firstNameTextField;
    private javax.swing.JButton helpButton;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField lastNameTextField;
    private javax.swing.JButton listButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton testListButton;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
